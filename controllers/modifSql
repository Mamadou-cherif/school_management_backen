USE `suiviprojetpublic`;
DROP procedure IF EXISTS `menus_getMenuFilsByGroupe`;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `suiviprojetpublic`.`menus_getMenuFilsByGroupe`;

DELIMITER $$

CREATE  PROCEDURE `menus_getMenuFilsByGroupe`(`menuPereId` INT, `groupeId` INT)
BEGIN
    SELECT `menus`.`id`,
    `menus`.`reference`,
    `menus`.`libelle`,
    `menus`.`descriptions`,
    `menus`.`url`,
    `menus`.`menuPereId`,
    `menus`.`ordre`,
    `menus`.`typeMenu`,
    `menus`.`image`,
    `menus`.`estActif`,
    `menus`.`creationDate`,
    `menus`.`creationUserId`,
    `menus`.`modifDate`,
    `menus`.`modifUserId`
	FROM `menus`
    WHERE `menus`.`menuPereId` = menuPereId
    AND `menus`.`estActif` = 1
    AND `menus`.`id` NOT IN (
        SELECT distinct(`privileges`.`menuId`)
        FROM `privileges`
        INNER JOIN `menus` ON `privileges`.`menuId` = `menus`.`id`
        WHERE `menus`.`menuPereId` = menuPereId
        AND `privileges`.`groupeId` = groupeId
        AND `privileges`.`modeAccesId` = 
        (
            SELECT `modeaccess`.`id` FROM `modeaccess` WHERE `modeaccess`.`libelle` ='Tout' and `modeaccess`.`estActif`=1
        )
    )
    ORDER BY `menus`.`ordre`;
END$$

DELIMITER ;



USE `suiviprojetpublic`;
DROP procedure IF EXISTS `onglets_getOngletByGroupe`;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `suiviprojetpublic`.`onglets_getOngletByGroupe`;

DELIMITER $$

CREATE  PROCEDURE `onglets_getOngletByGroupe`(`menuId` INT, `groupeId` INT)
BEGIN
   SELECT 
    `onglets`.`id`,
    `onglets`.`menuId`,
    `onglets`.`reference`,
    `onglets`.`libelle`,
    `onglets`.`descriptions`,
    `onglets`.`type`,
    `onglets`.`ordre`,
    `onglets`.`url`,
    `onglets`.`image`,
    `onglets`.`estActif`,
    `onglets`.`creationDate`,
    `onglets`.`creationUserId`,
    `onglets`.`modifDate`,
    `onglets`.`modifUserId`
    FROM `onglets`
    WHERE `onglets`.`menuId` = menuId
    AND `onglets`.`estActif` = 1
    AND `onglets`.`id` NOT IN (
        SELECT distinct(`privileges`.`ongletId`)
        FROM `privileges`
        INNER JOIN `onglets` ON `privileges`.`ongletId` = `onglets`.`id`
        WHERE `onglets`.`menuId` = menuId
        AND `privileges`.`groupeId` = groupeId
        AND `privileges`.`modeAccesId` = 
        (
            SELECT `modeaccess`.`id` FROM `modeaccess` WHERE `modeaccess`.`libelle` ='Tout' and `modeaccess`.`estActif`=1
        )
    )
    ORDER BY `onglets`.`ordre`;
    
END$$

DELIMITER ;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `financement_selectBy`;

DELIMITER $$
CREATE  PROCEDURE `financement_selectBy`(IN `id` INT, IN `projetId` INT, IN `structureId` INT, IN `type` VARCHAR(20), IN `typeAppui` TEXT, IN `taux` INT, IN `observations` TEXT, IN `estActif` TINYINT, IN `creationDate` DATETIME, IN `creationUserId` INT, IN `modifDate` DATETIME, IN `modifUserId` INT, IN `debutDonnees` INT, IN `finDonnees` INT)  BEGIN
	DECLARE requeteSql varchar(500);
	SET @requeteSql := 'SELECT\r\n\t\t`financement`.`id`,\r\n\t\t`financement`.`projetId`,\r\n        `projets`.`titre` as projet,\r\n        `projets`.`code` as codeProjet,\r\n        `structures`.`nom` as structure,\r\n  `structures`.`telephone1` as telephone,\r\n\t\t`financement`.`structureId`,\r\n\t\t`financement`.`type`,\r\n        `priorites`.`code` as priorite,\r\n        `statutprojets`.`code` as statutProjet,\r\n\t\t`financement`.`typeAppui`,\r\n\t\t`financement`.`taux`,\r\n\t\t`financement`.`observations` \r\n\t\tFROM `financement`\r\n        INNER JOIN `projets` ON `financement`.`projetId`=`projets`.`id`\r\n        INNER JOIN `structures` ON `financement`.`structureId`=`structures`.`id`
    INNER JOIN `priorites` ON `projets`.`prioriteId` =  `priorites`.`id`\r\n        INNER JOIN `statutprojets` ON `projets`.`statutId` =  `statutprojets`.`id`
    \r\n\t\tWHERE 1';
		IF id IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`id` = ',id);
		END IF;
		IF projetId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`projetId` = ',projetId);
		END IF;
		IF structureId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`structureId` = ',structureId);
		END IF;
		IF type IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`type` = "',type,'"');
		END IF;
		IF typeAppui IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`typeAppui` = "',typeAppui,'"');
		END IF;
		IF taux IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`taux` = ',taux);
		END IF;
		IF observations IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`observations` = "',observations,'"');
		END IF;
		IF estActif IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`estActif` = ',estActif);
		END IF;
		IF creationDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`creationDate` = "',creationDate,'"');
		END IF;
		IF creationUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`creationUserId` = ',creationUserId);
		END IF;
		IF modifDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`modifDate` = "',modifDate,'"');
		END IF;
		IF modifUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `financement`.`modifUserId` = ',modifUserId);
		END IF;
		IF debutDonnees IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' LIMIT ', debutDonnees, ',', finDonnees);
		END IF;

		PREPARE statement FROM @requeteSql;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

END$$

DELIMITER ;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `prestataires_selectById`;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `suiviprojetpublic`.`prestataires_selectById`;

DELIMITER $$

CREATE  PROCEDURE `prestataires_selectById`(IN `id` INT)
BEGIN
	SELECT
		`prestataires`.`id`,
		`prestataires`.`type`,
		`prestataires`.`categorie`,
		`prestataires`.`localisation`,
		`prestataires`.`nom`,
		`prestataires`.`sigle`,
		`prestataires`.`telephone`,
		`prestataires`.`email`,
		`prestataires`.`adresse`,
		`prestataires`.`localiteId`,
         `communes`.`id` as communeId,
         `prefectures`.`id` as prefectureId,
          `regions`.`id` as regionId,
          `regions`.`paysId` as paysId,
            `payss`.`indicatifTel`,
		`prestataires`.`partenaireLocalId`,
		`prestataires`.`observations`,
		`prestataires`.`estActif`,
		`prestataires`.`creationDate`,
		`prestataires`.`creationUserId`,
		`prestataires`.`modifDate`,
		`prestataires`.`modifUserId`
	FROM `prestataires`
    INNER JOIN `quartierdistricts` ON `prestataires`.`localiteId`=`quartierdistricts`.`id`
    INNER JOIN `communes` ON `quartierdistricts`.`communeId`=`communes`.`id`
    INNER JOIN `prefectures` ON `communes`.`prefectureId`=`prefectures`.`id`
     INNER JOIN `regions` ON `prefectures`.`regionId`=`regions`.`id`
      INNER JOIN `payss` ON `regions`.`paysId`=`payss`.`id`
	WHERE `prestataires`.`id` = id;
END$$

DELIMITER ;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `interventions_selectBy`;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `suiviprojetpublic`.`interventions_selectBy`;

DELIMITER $$

CREATE  PROCEDURE `interventions_selectBy`(`id` INT, `prestataireId` INT, `projetId` INT, `categorie` VARCHAR(20), `observations` TEXT, `estActif` TINYINT, `creationDate` DATETIME, `creationUserId` INT, `modifDate` DATETIME, `modifUserId` INT, `debutDonnees` INT, `finDonnees` INT)
BEGIN
	DECLARE requeteSql varchar(500);
	SET @requeteSql := 'SELECT
		`interventions`.`id`,
		`interventions`.`prestataireId`,
        `prestataires`.`nom` as prestataire,
        `prestataires`.`type`,
        `prestataires`.`categorie`,
        `prestataires`.`telephone`,
        `projets`.`titre` as projet,
         `projets`.`code` as codeProjet,
        `statutprojets`.`code` as statutProjet,
		`interventions`.`projetId`,
	   `priorites`.`code` as priorite,
		`interventions`.`categorie`,
		`interventions`.`observations`
		FROM `interventions`
        INNER JOIN `prestataires` ON `interventions`.`prestataireId`=`prestataires`.`id`
        INNER JOIN `projets` ON `interventions`.`projetId`=`projets`.`id`
         INNER JOIN `priorites` ON `projets`.`prioriteId` =  `priorites`.`id`
        INNER JOIN `statutprojets` ON `projets`.`statutId` =  `statutprojets`.`id`
		WHERE 1';
		IF id IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`id` = ',id);
		END IF;
		IF prestataireId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`prestataireId` = ',prestataireId);
		END IF;
		IF projetId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`projetId` = ',projetId);
		END IF;
		IF categorie IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`categorie` = "',categorie,'"');
		END IF;
		IF observations IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`observations` = "',observations,'"');
		END IF;
		IF estActif IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`estActif` = ',estActif);
		END IF;
		IF creationDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`creationDate` = "',creationDate,'"');
		END IF;
		IF creationUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`creationUserId` = ',creationUserId);
		END IF;
		IF modifDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`modifDate` = "',modifDate,'"');
		END IF;
		IF modifUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `interventions`.`modifUserId` = ',modifUserId);
		END IF;
		IF debutDonnees IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' LIMIT ', debutDonnees, ',', finDonnees);
		END IF;

		PREPARE statement FROM @requeteSql;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

END$$

DELIMITER ;





USE `suiviprojetpublic`;
DROP procedure IF EXISTS `services_selectById`;


DELIMITER $$
CREATE PROCEDURE `services_selectById`(`id` INT)
BEGIN
	SELECT
		`services`.`id`,
		`services`.`structureId`,
         `payss`.`indicatifTel`,
		`services`.`nom`,
		`services`.`responsableService`,
		`services`.`telephone`,
		`services`.`email`,
		`services`.`observations`,
		`services`.`estActif`,
		`services`.`creationDate`,
		`services`.`creationUserId`,
		`services`.`modifDate`,
		`services`.`modifUserId`
	FROM `services`
		INNER JOIN `structures` ON `services`.`structureId`=`structures`.`id`
		INNER JOIN `quartierdistricts` ON `structures`.`localiteId`=`quartierdistricts`.`id`
		INNER JOIN `communes` ON `quartierdistricts`.`communeId`=`communes`.`id`
		INNER JOIN `prefectures` ON `communes`.`prefectureId`=`prefectures`.`id`
		INNER JOIN `regions` ON `prefectures`.`regionId`=`regions`.`id`
		INNER JOIN `payss` ON `regions`.`paysId`=`payss`.`id`
	WHERE `services`.`id` = id;
END$$

DELIMITER ;



ALTER TABLE `suiviprojetpublic`.`projets` 
CHANGE COLUMN `statutId` `statutId` INT NOT NULL ;

-- ALTER TABLE `suiviprojetpublic`.`projets` 
-- ADD CONSTRAINT `fk_projets_statutProjetId`
--   FOREIGN KEY (`statutId`)
--   REFERENCES `suiviprojetpublic`.`statutprojets` (`id`)
--   ON DELETE RESTRICT
--   ON UPDATE CASCADE;
USE `suiviprojetpublic`;
DROP procedure IF EXISTS `serviceconcernes_selectById`;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `suiviprojetpublic`.`serviceconcernes_selectById`;

DELIMITER $$

CREATE  PROCEDURE `serviceconcernes_selectById`(`id` INT)
BEGIN
	SELECT
		`serviceconcernes`.`id`,
		`serviceconcernes`.`projetId`,
		`serviceconcernes`.`serviceId`,
        `services`.`structureId`,
		`serviceconcernes`.`observations`,
		`serviceconcernes`.`estActif`,
		`serviceconcernes`.`creationDate`,
		`serviceconcernes`.`creationUserId`,
		`serviceconcernes`.`modifDate`,
		`serviceconcernes`.`modifUserId`
	FROM `serviceconcernes`
    INNER JOIN `services` ON `serviceconcernes`.`serviceId`=`services`.`id`
	WHERE `serviceconcernes`.`id` = id;
END$$

DELIMITER ;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `serviceconcernes_selectBy`;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `suiviprojetpublic`.`serviceconcernes_selectBy`;

DELIMITER $$

CREATE  PROCEDURE `serviceconcernes_selectBy`(`id` INT, `projetId` INT, `serviceId` INT, `observations` TEXT, `estActif` TINYINT, `creationDate` DATETIME, `creationUserId` INT, `modifDate` DATETIME, `modifUserId` INT, `debutDonnees` INT, `finDonnees` INT)
BEGIN
	DECLARE requeteSql varchar(500);
	SET @requeteSql := 'SELECT
		`serviceconcernes`.`id`,
		`serviceconcernes`.`projetId`,
        `projets`.`titre` as projet,
        `services`.`nom` as service, 
        `services`.`responsableService` as responsable,
        `services`.`email` as email,
        `services`.`telephone` as telephone,
		`serviceconcernes`.`serviceId`,
        `structures`.`nom` as structure,
		`serviceconcernes`.`observations`
		FROM `serviceconcernes`
        INNER JOIN `projets` ON `serviceconcernes`.`projetId`=`projets`.`id`
        INNER JOIN `services` ON `serviceconcernes`.`serviceId`=`services`.`id`
		INNER JOIN `structures` ON `services`.`structureId`=`structures`.`id`
		WHERE 1';
		IF id IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`id` = ',id);
		END IF;
		IF projetId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`projetId` = ',projetId);
		END IF;
		IF serviceId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`serviceId` = ',serviceId);
		END IF;
		IF observations IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`observations` = "',observations,'"');
		END IF;
		IF estActif IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`estActif` = ',estActif);
		END IF;
		IF creationDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`creationDate` = "',creationDate,'"');
		END IF;
		IF creationUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`creationUserId` = ',creationUserId);
		END IF;
		IF modifDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`modifDate` = "',modifDate,'"');
		END IF;
		IF modifUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `serviceconcernes`.`modifUserId` = ',modifUserId);
		END IF;
		IF debutDonnees IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' LIMIT ', debutDonnees, ',', finDonnees);
		END IF;

		PREPARE statement FROM @requeteSql;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

END$$

DELIMITER ;



USE `suiviprojetpublic`;
DROP procedure IF EXISTS `investissements_selectBy`;

USE `suiviprojetpublic`;
DROP procedure IF EXISTS `suiviprojetpublic`.`investissements_selectBy`;

DELIMITER $$

CREATE  PROCEDURE `investissements_selectBy`(`id` INT, `projetId` INT, `categorieInvestId` INT, `libelle` TEXT, `unite` VARCHAR(45), `quantite` INT, `uniteId` INT, `cout` DOUBLE, `deviseId` INT, `observations` TEXT, `estActif` TINYINT, `creationDate` DATETIME, `creationUserId` INT, `modifDate` DATETIME, `modifUserId` INT, `debutDonnees` INT, `finDonnees` INT)
BEGIN
	DECLARE requeteSql varchar(500);
	SET @requeteSql := 'SELECT
		`investissements`.`id`,
		`investissements`.`projetId`,
		`investissements`.`categorieInvestId`, 
        `categorieinvestissements`.`libelle` as categorieInvest, 
        `devises`.`symbole` as devise,
        `unites`.`symbole` as symboleUnite, 
		`investissements`.`libelle`,
		`investissements`.`unite`,
		`investissements`.`quantite`,
		`investissements`.`uniteId`,
		`investissements`.`cout`,
		`investissements`.`deviseId`,
		`investissements`.`observations`,
		`investissements`.`estActif`,
		`investissements`.`creationDate`,
		`investissements`.`creationUserId`,
		`investissements`.`modifDate`,
		`investissements`.`modifUserId`
		FROM `investissements`
        INNER JOIN `categorieinvestissements` ON `investissements`.`categorieInvestId`=`categorieinvestissements`.`id`
		INNER JOIN `devises` ON `investissements`.`deviseId`=`devises`.`id`
        INNER JOIN `unites` ON `investissements`.`uniteId`=`unites`.`id`
        WHERE 1';
		IF id IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`id` = ',id);
		END IF;
		IF projetId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`projetId` = ',projetId);
		END IF;
		IF categorieInvestId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`categorieInvestId` = ',categorieInvestId);
		END IF;
		IF libelle IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`libelle` = "',libelle,'"');
		END IF;
		IF unite IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`unite` = "',unite,'"');
		END IF;
		IF quantite IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`quantite` = ',quantite);
		END IF;
		IF uniteId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`uniteId` = ',uniteId);
		END IF;
		IF cout IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`cout` = "',cout,'"');
		END IF;
		IF deviseId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`deviseId` = ',deviseId);
		END IF;
		IF observations IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`observations` = "',observations,'"');
		END IF;
		IF estActif IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`estActif` = ',estActif);
		END IF;
		IF creationDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`creationDate` = "',creationDate,'"');
		END IF;
		IF creationUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`creationUserId` = ',creationUserId);
		END IF;
		IF modifDate IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`modifDate` = "',modifDate,'"');
		END IF;
		IF modifUserId IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' AND `investissements`.`modifUserId` = ',modifUserId);
		END IF;
		IF debutDonnees IS NOT NULL THEN
			SET @requeteSql := CONCAT(@requeteSql, ' LIMIT ', debutDonnees, ',', finDonnees);
		END IF;

		PREPARE statement FROM @requeteSql;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

END$$

DELIMITER ;

